<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/batch
       http://www.springframework.org/schema/batch/spring-batch.xsd">

    <context:annotation-config/>

    <import resource="classpath:database/hibernate.xml" />
    <import resource="applicationContextDroolsSingleton.xml" />

    <context:component-scan base-package="kz.bsbnb.usci.eav.model" />
    <context:component-scan base-package="kz.bsbnb.usci.eav.stats" />
    <context:component-scan base-package="kz.bsbnb.usci.bconv" />
    <context:component-scan base-package="kz.bsbnb.usci.brms.rulesingleton" />
    <context:component-scan base-package="kz.bsbnb.usci.receiver" />
    <context:component-scan base-package="kz.bsbnb.usci.tool.couchbase" />
    <context:component-scan base-package="kz.bsbnb.usci.tool.status" />

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <property name="validationQuery" value="${jdbc.validationQuery}"/>
        <property name="testOnBorrow" value="${jdbc.testOnBorrow}"/>
        <property name="testOnReturn" value="${jdbc.testOnReturn}"/>
    </bean>

    <bean id="log4jInitializer" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.springframework.util.Log4jConfigurer.initLogging"/>
        <property name="arguments">
            <list>
                <value>classpath:properties/log4j.properties</value>
            </list>
        </property>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
        <property name="transactionManager" ref="transactionManager" />
    </bean>

    <bean id="monitor" class="kz.bsbnb.usci.receiver.monitor.ZipFilesMonitor">
        <constructor-arg>
            <map>
                <entry key="1" value-ref="batchJob" />
                <entry key="2" value-ref="batchJobCR" />
            </map>
        </constructor-arg>
    </bean>

    <bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository" />
        <property name="taskExecutor">
            <bean class="org.springframework.core.task.SimpleAsyncTaskExecutor">
                <property name="concurrencyLimit" value="5" />
            </bean>
        </property>
    </bean>

    <batch:job id="batchJob">
        <batch:step id="workflow">
            <batch:tasklet>
                <batch:chunk reader="staxEventEntityReader"
                             writer="rmiEventEntityWriter"
                             processor="entityProcessor" commit-interval="1"/>
            </batch:tasklet>
        </batch:step>
        <batch:listeners>
            <batch:listener ref="batchJobListener" after-job-method="afterJob" before-job-method="beforeJob"/>
        </batch:listeners>
    </batch:job>

    <batch:job id="batchJobCR">
        <batch:step id="workflow1">
            <batch:tasklet>
                <batch:chunk reader="CREntityReader"
                             writer="rmiEventEntityWriter"
                             processor="entityProcessor" commit-interval="10"/>
            </batch:tasklet>
        </batch:step>
        <batch:listeners>
            <batch:listener ref="batchJobListener" after-job-method="afterJob" before-job-method="beforeJob"/>
        </batch:listeners>
    </batch:job>

    <!-- remote services -->
    <bean id="remoteEntityService" class="org.springframework.remoting.rmi.RmiProxyFactoryBean">
        <property name="refreshStubOnConnectFailure" value="true"/>
        <property name="serviceUrl" value="rmi://127.0.0.1:1098/entityService"/>
        <property name="serviceInterface" value="kz.bsbnb.usci.sync.service.IEntityService"/>
    </bean>

    <bean id="remoteBatchService" class="org.springframework.remoting.rmi.RmiProxyFactoryBean">
        <property name="refreshStubOnConnectFailure" value="true"/>
        <property name="serviceUrl" value="rmi://127.0.0.1:1098/batchService"/>
        <property name="serviceInterface" value="kz.bsbnb.usci.sync.service.IBatchService"/>
    </bean>

    <bean id="remoteMetaFactoryService" class="org.springframework.remoting.rmi.RmiProxyFactoryBean">
        <property name="refreshStubOnConnectFailure" value="true"/>
        <property name="serviceUrl" value="rmi://127.0.0.1:1098/metaFactoryService"/>
        <property name="serviceInterface" value="kz.bsbnb.usci.sync.service.IMetaFactoryService"/>
    </bean>

    <bean id="remoteUserService" class="org.springframework.remoting.rmi.RmiProxyFactoryBean">
        <property name="refreshStubOnConnectFailure" value="true"/>
        <property name="serviceUrl" value="rmi://127.0.0.1:1099/portalUserBeanRemoteBusiness"/>
        <property name="serviceInterface" value="kz.bsbnb.usci.core.service.PortalUserBeanRemoteBusiness"/>
    </bean>

    <bean id="remoteCreditorService" class="org.springframework.remoting.rmi.RmiProxyFactoryBean">
        <property name="refreshStubOnConnectFailure" value="true"/>
        <property name="serviceUrl" value="rmi://127.0.0.1:1099/remoteCreditorBusiness"/>
        <property name="serviceInterface" value="kz.bsbnb.usci.core.service.RemoteCreditorBusiness"/>
    </bean>

    <!-- available services -->
    <bean id="batchProcessRmiServiceExporter" class="org.springframework.remoting.rmi.RmiServiceExporter">
        <property name="serviceName" value="batchProcessService"/>
        <property name="service" ref="batchProcessServiceImpl"/>
        <property name="serviceInterface" value="kz.bsbnb.usci.receiver.service.IBatchProcessService"/>
        <property name="registryPort" value="1097"/>
        <property name="registryHost" value="127.0.0.1"/>
    </bean>

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:properties/oracle.properties</value>
                <value>classpath:properties/main.properties</value>
                <value>classpath:properties/refs.properties</value>
            </list>
        </property>
    </bean>

</beans>
