#remains

rule read $$$
title: Остаток - Основной долг - Непросроченная  задолженность
rule "gen_remains_debt_current"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit" && isInsert()
                && getEls("{setString(KZT)}currency.short_name") == 0
                && getEl("change.remains.debt.current.value") != null
                && getEl("change.remains.debt.current.value") > 0
                && getEl("change.remains.debt.current.value_currency") == null )
then
  $entity.addValidationError("Остаток\\Основной долг\\Непросроченная  задолженность\\Значение остатка в валюте договора должен указываться");
end
$$$

rule save

rule read $$$
title: Остаток - Основной долг - Просроченная задолженность
rule "gen_remains_debt_pastdue"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit" && isInsert()
                && getEls("{setString(KZT)}currency.short_name") == 0
                && getEl("change.remains.debt.pastdue.value") != null
                && getEl("change.remains.debt.pastdue.value") > 0
                && getEl("change.remains.debt.pastdue.value_currency") == null )
then
  $entity.addValidationError("Остаток\\Основной долг\\Просроченная задолженность\\Значение остатка в валюте договора должен указываться для данного типа кредита");
end
$$$

rule save

rule read $$$
title: Остаток - Основной долг - Списанная с баланса задолженность
rule "credit_gen_remains_debt_writeoff"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit" && isInsert()
                && getEls("{setString(KZT)}currency.short_name") == 0
                && getEl("change.remains.debt.write_off.value") != null
                && getEl("change.remains.debt.write_off.value") > 0
                && getEl("change.remains.debt.write_off.value_currency") == null )
then
  $entity.addValidationError("Остаток\\Основной долг\\Списанная с баланса задолженность должен указываться для данного типа кредита");
end
$$$

rule save

rule read $$$
title: Остаток - Вознаграждение - Непросроченная  задолженность
rule "gen_remains_interest_current"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit" && isInsert()
                && getEls("{setString(KZT)}currency.short_name") == 0
                && getEl("change.remains.interest.current.value") != null
                && getEl("change.remains.interest.current.value") > 0
                && getEl("change.remains.interest.current.value_currency") == null )
then
  $entity.addValidationError("Остаток\\Вознаграждение\\Непросроченная  задолженность\\Значение остатка в валюте договора");
end
$$$

rule save

rule read $$$
title: Остаток - Вознаграждение - Просроченная  задолженность
rule "gen_remains_interest_pastdue"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit" && isInsert()
                && getEls("{setString(KZT)}currency.short_name") == 0
                && getEl("change.remains.interest.pastdue.value") != null
                && getEl("change.remains.interest.pastdue.value") > 0
                && getEl("change.remains.interest.pastdue.value_currency") == null )
then
  $entity.addValidationError("Остаток\\Вознаграждение\\Просроченная задолженность\\Значение остатка в валюте договора должен указываться для данного кредита");
end
$$$

rule save

rule read $$$
title: Остаток - Вознаграждение - Списанная с баланса задолженность
rule "gen_remains_interest_writeoff"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit" && isInsert()
                && getEls("{setString(KZT)}currency.short_name") == 0
                && getEl("change.remains.interest.write_off.value") != null
                && getEl("change.remains.interest.write_off.value") > 0
                && getEl("change.remains.interest.write_off.value_currency") == null )
then
  $entity.addValidationError("Остаток\\Вознаграждение\\Списанная с баланса задолженность\\Значение остатка в валюте договора должен указываться");
end
$$$

rule save

rule read $$$
title: Остаток - Положительная/отрицательная корректировка
rule "gen_remains_correction"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit" && isInsert()
                && getEls("{setString(KZT)}currency.short_name") == 0
                && getEl("change.remains.correction.value") != null
                && getEl("change.remains.correction.value") > 0
                && getEl("change.remains.correction.value_currency") == null )
then
  $entity.addValidationError("Остаток\\Положительная/отрицательная корректировка\\Значение остатка в валюте договора должен указываться");
end
$$$

rule save

rule read $$$
title: Остаток - Дисконт/премия
rule "gen_remains_discount"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit" && isInsert()
                && getEls("{setString(KZT)}currency.short_name") == 0
                && getEl("change.remains.discount.value") != null
                && getEl("change.remains.discount.value") > 0
                && getEl("change.remains.discount.value_currency") == null )
then
  $entity.addValidationError("Остаток\\Дисконт/премия\\Значение остатка в валюте договора должен указываться");
end
$$$

rule save
#end of remains


rule read $$$
title: проверка суммы обязательства
rule "pledge sum check"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit" && isInsert()
            && ( getEls("{count}pledges[pledge_type.code!=47][value=null]") > 0) )
then
  $entity.addValidationError("Для небланковых залогов сумма залога должна указываться");
end
$$$

rule save

rule read $$$
title: номер контракта обязательства
rule "pledge contract check"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit" && isInsert()
            && ( getEls("{count}pledges[pledge_type.code!=47][contract=null]") > 0) )
then
  $entity.addValidationError("Для небланковых залогов контракт залога должнен указываться");
end
$$$

rule save

rule read $$$
title: Руководитель юридического лица
rule "head juridical"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit" && isInsert()
            && getEls("{setString(17,18,19,24)}credit_type.code") == 0
            && getEls("{count}subject[is_organization=true]organization_info[head=null]") > 0)
then
  $entity.addValidationError("Руководитель юридического лица должен указываться для данного типа кредита");
end
$$$

rule save

rule read $$$
title: cумма займа
rule "amount"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit" && isInsert()
            && getEl("credit_type.code") != "12"
            && getEl("amount") == null)
then
  $entity.addValidationError("Сумма займа должен указываться для данного кредита");
end
$$$

rule save

rule read $$$
title: юр. лицо: вид экон деятельности
rule "jur econ_trade"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit" && isInsert()
            && getEls("{setString(17,18)}credit_type.code") == 0
            && getEls("{count}subject[is_organization=true]organization_info[econ_trade.code=null]") > 0)
then
  $entity.addValidationError("Вид экономической деятельности должен указываться для данного типа кредита");
end
$$$

rule save

rule read $$$
title: Субъект кредитной истории
rule "credit subject"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit" && isInsert()
            && getEls("{setString(17,18)}credit_type.code") == 0
            && getEls("{count}subject[is_organization=true]organization_info") == 0
            && getEls("{count}subject[is_person=true]person_info") == 0
            && getEls("{count}subject[is_creditor=true]organization_info") == 0)
then
  $entity.addValidationError("Субъект кредитной истории должен указываться для данного типа кредита");
end
$$$

rule save

rule read $$$
title: Вид валюты по договору
rule "currency by credit"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit" && isInsert()
            && getEls("{setString(15,25)}credit_type.code") == 0
            && getEl("currency.short_name") == null)
then
  $entity.addValidationError("Вид валюты по договору должен указываться для данного типа кредита");
end
$$$

rule save

rule read $$$
title: Организационно-правовая форма
rule "legal_form in jur"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit" && isInsert()
            && getEls("{setString(17,18,19,24)}credit_type.code") == 0
            && getEls("{count}subject[is_organization=true]organization_info[legal_form=null]") > 0)
then
  $entity.addValidationError("Организационно-правовая форма должна указываться для данного типа кредита");
end
$$$

rule save

rule read $$$
title: Дата погашения по условиям договора
rule "contract_maturity_date"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit" && isInsert()
            && getEls("{setString(02,10,12,13,14,15,25,26)}credit_type.code") == 0
            && getEl("contract_maturity_date") == null)
then
  $entity.addValidationError("Дата погашения по условиям договора должен указываться для данного типа кредита");
end
$$$

rule save

rule read $$$
title: Источник финансирования банка
rule "finance source"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit" && isInsert()
            && getEls("{setString(02,03,10,12,13,14,15,17,18,24,25,26)}credit_type.code") == 0
            && getEl("finance_source.code") == null)
then
  $entity.addValidationError("Источник финансирования банка (организации), выдавшей заем должен указываться для данного типа кредита");
end
$$$

rule save

rule read $$$
title: Цель кредитования
rule "credit purpose"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit" && isInsert()
            && getEls("{setString(02,03,10,12,13,14,15,16,17,18,24,25,26)}credit_type.code") == 0
            && getEl("credit_purpose.code") == null)
then
  $entity.addValidationError("Цель кредитования должен указываться для данного типа кредита");
end
$$$

rule save

rule read $$$
title: Объект кредитования
rule "credit object"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit" && isInsert()
            && getEls("{setString(02,03,10,12,13,14,15,16,17,18,24,25,26)}credit_type.code") == 0
            && getEl("credit_object.code") == null)
then
  $entity.addValidationError("Объект кредитования должен указываться для данного типа кредита");
end
$$$

rule save


rule read $$$
title: Вид экономической деятельности для КЗ
rule "econ trade KZ"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit" && isInsert()
            && getEls("{count}subject[is_organization=true]organization_info[country.code_numeric=398][econ_trade.code=null]") > 0)
then
  $entity.addValidationError("Вид экономической деятельности должен указываться для юр лица Казахстана");
end
$$$

rule save

quit
