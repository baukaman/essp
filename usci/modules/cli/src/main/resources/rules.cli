rule clear
#rule set date 01.04.2001
#rule create package credit_parser
#rule rc
#rule set package credit_parser
rule set version

#portion added in 14.04.2015

rule read $$$
title: Проверка номера ИИН физ лиц
rule "iin algo check person"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
            && ( $r : BRMSHelper.getInvalidIINs(getEls("{get}subjects.person.docs[doc_type.code=06]no")) && $r.size() > 0))
then
  $entity.addValidationError("обнаружен некорректный иин: " + $r );
end
$$$

rule save

rule read $$$
title: Проверка номера ИИН юр лиц
rule "iin algo check organization"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
            && ( $r : BRMSHelper.getInvalidIINs(getEls("{get}subjects.organization.docs[doc_type.code=06]no")) && $r.size() > 0))
then
  $entity.addValidationError("обнаружен некорректный иин: " + $r );
end
$$$

rule save

rule read $$$
title: Проверка номера ИИН руководителя организаций
rule "iin algo check head"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
            && ( $r : BRMSHelper.getInvalidIINs(getEls("{get}subjects.organization.head.docs[doc_type.code=06]no")) && $r.size() > 0))
then
  $entity.addValidationError("обнаружен некорректный иин руководителя: " + $r );
end
$$$

rule save

#remains

rule read $$$
title: Остаток - Основной долг - Непросроченная  задолженность
rule "gen_remains_debt_current"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
                && getEls("{setString(035)}currency.code") == 0
                && getEl("change.remains.debt.current.value_currency") == null )
then
  $entity.addValidationError("Остаток\\Основной долг\\Непросроченная  задолженность\\Значение остатка в валюте договора должен указываться");
end
$$$

rule save

rule read $$$
title: Остаток - Основной долг - Просроченная задолженность
rule "gen_remains_debt_pastdue"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
                && getEls("{setString(035,398)}currency.code") == 0
                && getEl("change.remains.debt.pastdue.value_currency") == null )
then
  $entity.addValidationError("Остаток\\Основной долг\\Просроченная задолженность\\Значение остатка в валюте договора должен указываться для данного типа кредита");
end
$$$

rule save

rule read $$$
title: Остаток - Основной долг - Списанная с баланса задолженность
rule "credit_gen_remains_debt_writeoff"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
                && getEls("{setString(035,398)}currency.code") == 0
                && getEl("change.remains.debt.write_off.value_currency") == null )
then
  $entity.addValidationError("Остаток\\Основной долг\\Списанная с баланса задолженность должен указываться для данного типа кредита");
end
$$$

rule save

rule read $$$
title: Остаток - Вознаграждение - Непросроченная  задолженность
rule "gen_remains_interest_current"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
                && getEls("{setString(035,398)}currency.code") == 0
                && getEl("change.remains.interest.current.value_currency") == null )
then
  $entity.addValidationError("Остаток\\Вознаграждение\\Непросроченная  задолженность\\Значение остатка в валюте договора");
end
$$$

rule save

rule read $$$
title: Остаток - Вознаграждение - Просроченная  задолженность
rule "gen_remains_interest_pastdue"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
                && getEls("{setString(035,398)}currency.code") == 0
                && getEl("change.remains.interest.pastdue.value_currency") == null )
then
  $entity.addValidationError("Остаток\\Вознаграждение\\Просроченная задолженность\\Значение остатка в валюте договора должен указываться для данного кредита");
end
$$$

rule save

rule read $$$
title: Остаток - Вознаграждение - Списанная с баланса задолженность
rule "gen_remains_interest_writeoff"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
                && getEls("{setString(035,398)}currency.code") == 0
                && getEl("change.remains.interest.write_off.value_currency") == null )
then
  $entity.addValidationError("Остаток\\Вознаграждение\\Списанная с баланса задолженность\\Значение остатка в валюте договора должен указываться");
end
$$$

rule save

rule read $$$
title: Остаток - Положительная/отрицательная корректировка
rule "gen_remains_correction"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
                && getEls("{setString(035,398)}currency.code") == 0
                && getEl("change.remains.correction.value_currency") == null )
then
  $entity.addValidationError("Остаток\\Положительная/отрицательная корректировка\\Значение остатка в валюте договора должен указываться");
end
$$$

rule save

rule read $$$
title: Остаток - Дисконт/премия
rule "gen_remains_discount"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
                && getEls("{setString(035,398)}currency.code") == 0
                && getEl("change.remains.discount.value_currency") == null )
then
  $entity.addValidationError("Остаток\\Дисконт/премия\\Значение остатка в валюте договора должен указываться");
end
$$$

rule save
#end of remains


rule read $$$
title: проверка суммы обязательства
rule "pledge sum check"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
            && ( getEls("{count}pledges[pledge_type.code!=47][value=null]") > 0) )
then
  $entity.addValidationError("Для небланковых залогов сумма залога должна указываться");
end
$$$

rule save

rule read $$$
title: номер контракта обязательства
rule "pledge contract check"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
            && ( getEls("{count}pledges[pledge_type.code!=47][contract=null]") > 0) )
then
  $entity.addValidationError("Для небланковых залогов контракт залога должнен указываться");
end
$$$

rule save

rule read $$$
title: Руководитель юридического лица
rule "head juridical"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
            && getEls("{setString(17,18,19,24)}credit_type.code") == 0
            && getEls("{count}subjects.organization[head=null]") > 0)
then
  $entity.addValidationError("Руководитель юридического лица должен указываться для данного типа кредита");
end
$$$

rule save

rule read $$$
title: cумма займа
rule "amount"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
            && getEl("credit_type.code") != "12"
            && getEl("amount") == null)
then
  $entity.addValidationError("Сумма займа должен указываться для данного кредита");
end
$$$

rule save

rule read $$$
title: юр. лицо: вид экон деятельности
rule "jur econ_trade"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
            && getEls("{setString(17,18)}credit_type.code") == 0
            && getEls("{count}subjects.organization[econ_trade.code=null]") > 0)
then
  $entity.addValidationError("Вид экономической деятельности должен указываться для данного типа кредита");
end
$$$

rule save

rule read $$$
title: Субъект кредитной истории
rule "credit subject"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
            && getEls("{setString(17,18)}credit_type.code") == 0
            && getEls("{count}subjects") == 0)
then
  $entity.addValidationError("Субъект кредитной истории должен указываться для данного типа кредита");
end
$$$

rule save

rule read $$$
title: Вид валюты по договору
rule "currency by credit"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
            && getEls("{setString(15,25)}credit_type.code") == 0
            && getEl("currency.code") == null)
then
  $entity.addValidationError("Вид валюты по договору должен указываться для данного типа кредита");
end
$$$

rule save

rule read $$$
title: Организационно-правовая форма
rule "legal_form in jur"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
            && getEls("{setString(17,18,19,24)}credit_type.code") == 0
            && getEl("subjects.organization.legal_form") == null)
then
  $entity.addValidationError("Организационно-правовая форма должна указываться для данного типа кредита");
end
$$$

rule save

rule read $$$
title: Дата погашения по условиям договора
rule "contract_maturity_date"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
            && getEls("{setString(02,10,12,13,14,15,25,26)}credit_type.code") == 0
            && getEl("contract_maturity_date") == null)
then
  $entity.addValidationError("Дата погашения по условиям договора должен указываться для данного типа кредита");
end
$$$

rule save

rule read $$$
title: Источник финансирования банка
rule "finance source"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
            && getEls("{setString(02,03,10,12,13,14,15,17,18,24,25,26)}credit_type.code") == 0
            && getEl("finance_source.code") == null)
then
  $entity.addValidationError("Источник финансирования банка (организации), выдавшей заем должен указываться для данного типа кредита");
end
$$$

rule save

rule read $$$
title: Цель кредитования
rule "credit purpose"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
            && getEls("{setString(02,03,10,12,13,14,15,16,17,18,24,25,26)}credit_type.code") == 0
            && getEl("credit_purpose.code") == null)
then
  $entity.addValidationError("Цель кредитования должен указываться для данного типа кредита");
end
$$$

rule save

rule read $$$
title: Объект кредитования
rule "credit object"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
            && getEls("{setString(02,03,10,12,13,14,15,16,17,18,24,25,26)}credit_type.code") == 0
            && getEl("credit_object.code") == null)
then
  $entity.addValidationError("Объект кредитования должен указываться для данного типа кредита");
end
$$$

rule save


rule read $$$
title: Вид экономической деятельности для КЗ
rule "econ trade KZ"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
            && getEls("{count}subjects.organization[country.code_numeric=398][econ_trade.code=null]") > 0)
then
  $entity.addValidationError("Вид экономической деятельности должен указываться для юр лица Казахстана");
end
$$$

rule save

#portion cr hard coded rules

rule read $$$
title: rd_first_day
rule "rd_first_day"
//MES401
when
  $entity: BaseEntity(BRMSHelper.firstDay($entity.getReportDate()) !=1)
then
  $entity.addValidationError("Неверная отчетная дата");
end
$$$

rule save

rule read $$$
title: debt_pastdue_vs_report_date
rule "DEBTREMAINS_DEBT_PASDUE_OPEN_DATE_MORE_THAN_OR_EQUAL_TO_REPORT_DATE"
//MES825
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
        && getEl("change.remains.debt.pastdue.open_date") != null
        && getEl("change.remains.debt.pastdue.open_date") >= reportDate)
then
  $entity.addValidationError("Дата вынесения на счет просроченной задолженности по основному долгу не должна быть равна или позднее отчетной даты");
end
$$$

rule save

rule read $$$
title: debt_pastdue_od_vs_cd
rule "DEBT_REMAINS_DEBT_PASTDUE_CLOSE_DATE_LESS_THAN_OPEN_DATE"
//MES827
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
    && getEl("change.remains.debt.pastdue.open_date")!=null
    && getEl("change.remains.debt.pastdue.close_date")!=null
    && getEl("change.remains.debt.pastdue.open_date") > getEl("change.remains.debt.pastdue.close_date") )
then
  $entity.addValidationError("Дата погашения просроченной задолженности по основному долгу не должна быть ранее даты вынесения на счет просроченной задолженности по основному долгу");
end
$$$

rule save

rule read $$$
title: debt_pastdue_cd_rd
rule "DEBT_REMAINS_DEBT_PASTDUE_CLOSE_DATE_MORE_THAN_REPORT_DATE"
//MES828
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
                && getEl("change.remains.debt.pastdue.close_date") != null
                && getEl("change.remains.debt.pastdue.close_date") > getReportDate())
then
   $entity.addValidationError("Дата погашения просроченной задолженности по основному долгу не должна быть позднее отчетной даты")
end
$$$

rule save

rule read $$$
title: debt_pastdue_val1
rule "DEBT_REMAINS_DEBT_PASTDUE_VALUE_NULL_WHEN_CLOSE_DATE_IS_NOT_SET"
//MES829
when
  $entity: BaseEntity( getMeta().getClassName() == "credit"
                        && (getEl("change.remains.debt.pastdue.value") == null
                            || getEl("change.remains.debt.pastdue.value") ==0 )
                        &&    getEl("change.remains.debt.pastdue.close_date") == null
                        &&    getEl("change.remains.debt.pastdue.open_date") != null)
then
   $entity.addValidationError("При наличии даты вынесения на счет просроченной задолженности по основному долгу и отсутствии даты погашения просроченной задолженности по основному долгу» значение остатка не может быть пустым или равным нулю.")
end
$$$

rule save

rule read $$$
title: debt_pastdue_val2
rule "DEBT_REMAINS_DEBT_PASTDUE_OPEN_DATE_IS_NULL_WHEN_VALUE_IS_NON_ZERO"
//MES833
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
                && getEl("change.remains.debt.pastdue.open_date") == null
                && getEl("change.remains.debt.pastdue.value")!=null
                && getEl("change.remains.debt.pastdue.value")!=0 )
then
   $entity.addValidationError("При наличии непустого и неравного нулю значения остатка просроченной задолженности по основному долгу дата вынесения на счет просроченной задолженности по основному долгу не может быть пустой.")
end
$$$

rule save

rule read $$$
title: interest_pastdue_dates
rule "DEBTREMAINS_INTEREST_PASDUE_DATES_ABSENSE"
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
                && getEl("change.remains.interest.pastdue") !=null
                && getEl("change.remains.interest.pastdue.open_date") == null
                && getEl("change.remains.interest.pastdue.close_date") == null)
then
  $entity.addValidationError("Отсутствуют даты остатка просроченного вознаграждения");
end
$$$

rule save

rule read $$$
title: interest_pastdue_vs_rd
rule "DEBTREMAINS_INTEREST_PASDUE_OPEN_DATE_MORE_THAN_OR_EQUAL_TO_REPORT_DATE"
//MES826
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
        && getEl("change.remains.interest.pastdue.open_date") != null
        && getEl("change.remains.interest.pastdue.open_date") >= reportDate)
then
  $entity.addValidationError("Дата вынесения на счет просроченной задолженности по вознаграждению не должна быть равна или позднее отчетной даты");
end
$$$

rule save

rule read $$$
title: interest_pastdue_od_vs_cd
rule "DEBT_REMAINS_INTEREST_PASTDUE_CLOSE_DATE_LESS_THAN_OPEN_DATE"
//MES830
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
    && getEl("change.remains.interest.pastdue.open_date")!=null
    && getEl("change.remains.interest.pastdue.close_date")!=null
    && getEl("change.remains.interest.pastdue.open_date") > getEl("change.remains.interest.pastdue.close_date") )
then
  $entity.addValidationError("Дата погашения просроченной задолженности по начисленному вознаграждению не может быть ранее даты вынесения на счет");
end
$$$

rule save

rule read $$$
title: interest_pastdue_cd_rd
rule "DEBT_REMAINS_INTEREST_PASTDUE_CLOSE_DATE_MORE_THAN_REPORT_DATE"
//MES831
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
            && getEl("change.remains.interest.pastdue.close_date") != null
            && getEl("change.remains.interest.pastdue.close_date") > getReportDate())
then
   $entity.addValidationError("Дата погашения просроченной задолженности по начисленному вознаграждению не может быть позднее отчетной даты")
end
$$$

rule save

rule read $$$
title: interest_pastdue_val1
rule "DEBT_REMAINS_INTEREST_PASTDUE_VALUE_NULL_WHEN_CLOSE_DATE_IS_NOT_SET"
//MES832
when
  $entity: BaseEntity( getMeta().getClassName() == "credit"
                        && (getEl("change.remains.interest.pastdue.value") == null
                          || getEl("change.remains.interest.pastdue.value") == 0 )
                        &&    getEl("change.remains.interest.pastdue.close_date") == null
                        &&    getEl("change.remains.interest.pastdue.open_date") != null)
then
   $entity.addValidationError("При наличии даты вынесения на счет просроченной задолженности по начисленному вознаграждению и отсутствии даты погашения просроченной задолженности по начисленному вознаграждению значение остатка не может быть пустым или равным нулю.")
end
$$$

rule save

rule read $$$
title: interest_pastdue_val2
rule "DEBT_REMAINS_INTEREST_PASTDUE_OPEN_DATE_IS_NULL_WHEN_VALUE_IS_NON_ZERO"
//MES834
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
                && getEl("change.remains.interest.pastdue.open_date") == null
                && getEl("change.remains.interest.pastdue.value")!=null
                && getEl("change.remains.interest.pastdue.value")!=0 )
then
   $entity.addValidationError("При наличии непустого и неравного нулю значения остатка просроченной задолженности по начисленному вознаграждению дата вынесения на счет просроченной задолженности по начисленному вознаграждению не может быть пустой.")
end
$$$

rule save

rule read $$$
title: ACTUAL_ISSUE_DATE_MISMATCH
rule "ACTUAL_ISSUE_DATE_MISMATCH"
//MES817
when
    $entity: BaseEntity(getMeta().getClassName() == "credit"
        && getEl("actual_issue_date")!=null && getEl("primary_contract.date")!=null
        && getEl("actual_issue_date") < getEl("primary_contract.date"))
then
    $entity.addValidationError("Фактическая дата выдачи меньше даты основного договора");
end
$$$

rule save

rule read $$$
title: CONTRACT_MATURITY_DATE_MISMATCH
rule "CONTRACT_MATURITY_DATE_MISMATCH"
//MES818
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
        && getEl("contract_maturity_date") != null
        && getEl("contract_maturity_date") < getEl("primary_contract.date"))
then
  $entity.addValidationError("Дата погашения по договору не сооответствует дате договора и/или фактической дате выдачи (дата погашения по договору должна быть позднее или равна дате договора и фактической дате выдачи)")
end

$$$

rule save

rule read $$$
title: MATURITY_DATE_MISMATCH
rule "MATURITY_DATE_MISMATCH"
//MES819
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
        && mDate : getEl("maturity_date")
        && pDate : getEl("primary_contract.date")
        && mDate!=null && pDate !=null
        && mDate < pDate)
then
  $entity.addValidationError("Неверная  дата фактического погашения");
end

$$$

rule save

rule read $$$
title: PROLONGATION_DATE_MISMATCH
rule "PROLONGATION_DATE_MISMATCH_820"
//MES820
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
        && pDate: getEl("prolongation_date") !=null
            && mDate: getEl("contract_maturity_date")!=null
        && pDate < mDate)
then
  $entity.addValidationError("Неверная дата окончания пролонгации");
end

$$$

rule save

rule read $$$
title: PLEDGE_ABSENSE
rule "PLEDGE_ABSENSE"
//MES810
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
        && getEls("{count}pledges") == 0)
then
  $entity.addValidationError("Отсутсвует залог");
end

$$$

rule save

rule read $$$
title: PLEDGE_NO_OR_VALUE_ABSENSE
rule "PLEDGE_NO_OR_VALUE_ABSENSE"
//MES814
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
        && getEls("{count}pledges[pledge_type.code!=47][contract=null][value=null]") > 0)
then
  $entity.addValidationError("Отсутсвует номер договора залога или сумма залога");
end

$$$

rule save

rule read $$$
title: PLEDGE_BLANK_WITH_NON_BLANK
rule "PLEDGE_BLANK_WITH_NON_BLANK"
//MES837
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
    && getEls("{count}pledges") > 1
    && getEls("{count}pledges[pledge_type.code=47]") > 0)
then
  $entity.addValidationError("Значение «Без обеспечения (бланковый)» не может использоваться с иными видами обеспечения");
end

$$$

rule save

rule read $$$
title: DEBTOR_DOC_ABSENSE
rule "DEBTOR_DOC_ABSENSE"
//MES903
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
        && (getEls("{count}subjects[creditor!=null]creditor[docs=null]") > 0
                ||
            getEls("{count}subjects[person!=null]person[docs=null]") > 0
                ||
            getEls("{count}subjects[organization!=null]organization[docs=null]") > 0))
then
  $entity.addValidationError("Отсутствует документ заемщика");
end
$$$

rule save

rule read $$$
title: SUBJECT_DOC_NO_EMPTY
rule "SUBJECT_DOC_NO_EMPTY"
//MES914
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
        && (getEls("{count}subjects.creditor.docs[no=null]") > 0
                ||
            getEls("{count}subjects.person.docs[no=null]") > 0
                ||
            getEls("{count}subjects.organization.docs[no=null]") > 0))
then
  $entity.addValidationError("Номер документа субъекта не может быть пустым");
end
$$$

rule save

rule read $$$
title: BANK_RELATION_BLOCK_INVALID
rule "BANK_RELATION_BLOCK_INVALID"
//MES921
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
        && (
            (getEls("{count}subjects.person.bank_relations.bank_relation") > 1
            && getEls("{count}subjects.person.bank_relations[bank_relation.code=50]") > 0)
            ||
            (getEls("{count}subjects.organization.bank_relations.bank_relation") > 1
            && getEls("{count}subjects.organization.bank_relations[bank_relation.code=50]") > 0)
            ||
            (getEls("{count}subjects.creditor.bank_relations.bank_relation") > 1
            && getEls("{count}subjects.creditor.bank_relations[bank_relation.code=50]") > 0)
        ))
then
  $entity.addValidationError("Неправильно сформирован блок \"Признаки связанности с банком\"");
end

$$$

rule save

rule read $$$
title: BANK_RELATION_DUPLICATE
rule "BANK_RELATION_DUPLICATE"
//MES921
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
  && (
        getEls("{hasDuplicates(subjects.person.bank_relations)}bank_relation.code") == true ||
        getEls("{hasDuplicates(subjects.organization.bank_relations)}bank_relation.code") == true
     ))
then
  $entity.addValidationError("Неправильно сформирован блок \"Признаки связанности с банком\"");
end

$$$

rule save

rule read $$$
title: PLEDGE_DUPLICATE
rule "PLEDGE_DUPLICATE"
//MES836
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
  && getEls("{hasDuplicates(pledges)}pledge_type.code,contract") == true)
then
  $entity.addValidationError("Обнаружены дублирующиеся записи в списке залогов");
end
$$$

rule save

rule read $$$
title: SUBJECT_DUPLICATE_DOCS
rule "SUBJECT_DUPLICATE_DOCS"
//MES922
when
  $entity: BaseEntity(getMeta().getClassName() == "credit"
        && ( getEls("{hasDuplicates(subjects.person.docs)}doc_type.code,no") == true ||
             getEls("{hasDuplicates(subjects.organization.docs)}doc_type.code,no") == true
        ))
then
  $entity.addValidationError("Дублирующие документы");
end

$$$

rule save

rule read $$$
title: INCORRECT_PROVISION_MSFO
rule "INCORRECT_PROVISION_MSFO"
//MES1600
when
  $entity: BaseEntity(getMeta().getClassName == "credit"
      && getEl("portfolio.portfolio_msfo.code") != null
      && getEl("change.credit_flow.provision.provision_msfo.value") != null
      && getEl("change.credit_flow.provision.provision_msfo.value") > 0)
then
  $entity.addValidationError("Неверно указанные провизии");
end
$$$

rule save

rule read $$$
title: INCORRECT_PROVISION_KFN
rule "INCORRECT_PROVISION_KFN"
//MES1600
when
  $entity: BaseEntity(getMeta().getClassName == "credit"
      && getEl("portfolio.portfolio.code") != null
      && getEl("change.credit_flow.provision.provision_kfn.value") != null
      && getEl("change.credit_flow.provision.provision_kfn.value") > 0)
then
  $entity.addValidationError("Неверно указанные провизии");
end
$$$

rule save

rule read $$$
title: credit_type
rule "credit Type check"
when:
 $entity: BaseEntity( getMeta().getClassName == "credit" && getEl("credit_type.code") == null )
then
 $entity.addValidationError("Не указан справочник вид займа и условных обязательств ");
end
$$$

rule save


quit

