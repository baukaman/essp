batch_status {
    map:
        function (doc, meta) {
          if(doc.type == "batch") {
            emit(meta.id.substring(6), [doc.id, doc.fileName]);
          }
          if(doc.type == "batch_status") {
            emit(meta.id.substring(13), [doc.batchStatuses[doc.batchStatuses.length - 1].protocol]);
          }
        }

    reduce:
        function(key, values, rereduce) {
          var obj = values[values.length - 1];

          for (i = values.length - 2; i >= 0; i--) {
            obj = obj.concat(values[i]);
          }

          return obj;
        }
    }
}

batch {
    map:
        function (doc, meta) {
          if(doc.type == "batch") {
            emit(meta.id.substring(6), {id: doc.id, fileName: doc.fileName, received: doc.received});
          }
          if(doc.type == "batch_status") {
            emit(meta.id.substring(13), {batchStatuses: doc.batchStatuses});
          }
        }

    reduce:
        function(key, values, rereduce) {
          var obj = values[1];
          obj["status"] = values[0];

          return values[1];
        }
}

contract_status {
    /*map:
        function (doc, meta) {
          if(doc.type == "contract_status") {
            emit(doc.batchId, {index: doc.index, contractStatuses: doc.contractStatuses});
          }
        }

    reduce:
        function(key, values, rereduce) {
          if(rereduce) {
            var obj = values[0];
            for(i = 1; i < values.length; i++) {
              obj = obj.concat(values[i]);
            }

            return obj;
          } else {
            return values;
          }
        }*/
    map:
        function (doc, meta) {
          if(doc.type == "contract_status") {
            var str = ("000000000000" + doc.index);
            emit(doc.batchId + "_" + doc.index + "_" + (str.substring(str.length-10)), {index: doc.index, contractStatuses: doc.contractStatuses});
          }
        }
}

batch_sign {
        map:
            function (doc, meta) {
              if(doc.type == "sign" && !(doc.hasOwnProperty("sign"))) {
                emit(doc.userId, doc);
              }
            }
}

batch_pending {
        map:
            function (doc, meta) {
              if(doc.type == "batch_status" && doc.batchStatuses[doc.batchStatuses.length - 1].protocol != "COMPLETED") {
                emit(meta.id.substring(13), doc.batchStatuses[doc.batchStatuses.length - 1].protocol);
              }
            }
}