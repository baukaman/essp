
  CREATE TABLE "CORE"."EAV_LOG_DELETES"
   (	"ID" NUMBER(14,0) NOT NULL ENABLE,
	"BATCH_ID" NUMBER(14,0) NOT NULL ENABLE,
	"USER_ID" NUMBER(14,0) NOT NULL ENABLE,
	"BASE_VALUE_ID" NUMBER(14,0) NOT NULL ENABLE,
	"CLASS_NAME" VARCHAR2(50 BYTE) NOT NULL ENABLE,
	"CREDITOR_ID" NUMBER(14,0),
	"CONTAINER_ID" NUMBER(14,0),
	"REPORT_DATE" DATE NOT NULL ENABLE,
	"VALUE" VARCHAR2(1024 BYTE) NOT NULL ENABLE,
	"STACKTRACE" VARCHAR2(4000 BYTE) NOT NULL ENABLE,
	"RECEIPT_DATE" DATE NOT NULL ENABLE,
	 PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "CORE"."TRG_EAV_LOG_DEL_BASE_VALUE_ID" BEFORE INSERT ON eav_log_deletes FOR EACH ROW  WHEN (new.base_value_id IS NULL) BEGIN SELECT seq_eav_log_del_base_value_id.nextval INTO :new.base_value_id FROM dual; END;
/
ALTER TRIGGER "CORE"."TRG_EAV_LOG_DEL_BASE_VALUE_ID" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "CORE"."TRG_EAV_LOG_DELETES_USER_ID" BEFORE INSERT ON eav_log_deletes FOR EACH ROW  WHEN (new.user_id IS NULL) BEGIN SELECT seq_eav_log_deletes_user_id.nextval INTO :new.user_id FROM dual; END;
/
ALTER TRIGGER "CORE"."TRG_EAV_LOG_DELETES_USER_ID" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "CORE"."TRG_EAV_LOG_DELETES_BATCH_ID" BEFORE INSERT ON eav_log_deletes FOR EACH ROW  WHEN (new.batch_id IS NULL) BEGIN SELECT seq_eav_log_deletes_batch_id.nextval INTO :new.batch_id FROM dual; END;
/
ALTER TRIGGER "CORE"."TRG_EAV_LOG_DELETES_BATCH_ID" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "CORE"."TRG_EAV_LOG_DELETES_ID" BEFORE INSERT ON eav_log_deletes FOR EACH ROW  WHEN (new.id IS NULL) BEGIN SELECT seq_eav_log_deletes_id.nextval INTO :new.id FROM dual; END;
/
ALTER TRIGGER "CORE"."TRG_EAV_LOG_DELETES_ID" ENABLE;



CREATE SEQUENCE  "CORE"."SEQ_EAV_LOG_DEL_BASE_VALUE_ID"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOPARTITION ;

